version: 2.1
orbs: 
  node: circleci/node@5.0.2

commands:
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/H5hKEfFcMQPwDDxtsEouKX/migration_migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            

  awscli-install:
    steps:
      - run:
         name: install aws cli 
         command: |
            apk add --no-cache \
             python3 \
             py3-pip \
             && pip3 install --upgrade pip \
             && pip3 install \
             awscli \
             && rm -rf /var/cache/apk/*
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - run:
          name: Fail Fast
          when: on_fail 
          command:
             exit 1   
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - run:
          name: Fail Fast
          when: on_fail 
          command:
             exit 1    
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
    
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: test front end
         
         command: |
             cd frontend
             npm install
             npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
         name: test front end
         
         command: |
             cd backend
             npm install
             npm run test
 
 
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: scan frontend dependancies
         command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
         name: scan backend dependancies
         
         command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --force             
             npm audit --audit-level=critical
    
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACK_PUBLICIP=$(aws ec2 describe-instances \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query  'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACK_PUBLICIP >> .circleci/ansible/inventory.txt
            echo $BACK_PUBLICIP >> .circleci/ansible/inventory_temp.txt
     # - store_artifacts:
      #    path: .circleci/ansible/inventory_temp.txt
       #   destination: artifact-file     

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["be:13:2e:62:c7:6b:c4:87:19:0f:94:00:8c:c1:dc:4b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml  
      - destroy-environment

  run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name : install aws 
          command: |
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
              then
                  curl https://kvdb.io/H5hKEfFcMQPwDDxtsEouKX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-environment   


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
           yum install -y tar gzip
      - node/install: 
          node-version: '13.8'

      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACK_PUBLICIP=$(aws ec2 describe-instances \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query  'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            export API_URL="http://${BACK_PUBLICIP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACK_PUBLICIP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations 



  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: [18:ae:75:0c:8b:9e:2c:3a:c9:3a:6a:af:bc:8b:08:f7]

      - attach_workspace:
          at: ~/
          
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            apk add --update openssh-client
      - run:
          name: Deploy backend
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar  -czvf artifact.tar.gz backend
            cp artifact.tar.gz  ./.circleci/ansible/roles/deploy/tasks/files/   
            cd .circleci/ansible
            BACKEND_IP=`cat inventory.txt | head -2 | tail -1`
            echo "BACKEND_IP: ${BACKEND_IP}"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  
  smoke-test:
    docker:
       - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add curl
            apk add bash  
            apk add sudo
            apk add --update npm
            
      - awscli-install
      - run:
          name:  backend smok test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query  'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
  
  cloudfront-update:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum -y install tar gzip
      - node/install: 
          node-version: '13.8'       
      
      - run:
          name: get old workflow ID
          command: |
             sudo apt-get -y -qq update
             export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
      - run:
          name: save old workflow ID
          command: |
             echo "OldWorkflowID_to be saved to the file: ${OldWorkflowID}"
             echo $OldWorkflowID > .circleci/ansible/workflowID 
             tempVar=$(<.circleci/ansible/workflowID)
             echo tempValue :"$tempVar" 
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/workflowID    

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      

  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            
        #    export OldWorkflowID=$(aws cloudformation list-exports \
         #   --query "Exports[?Name==\`WorkflowID\`].Value" \
         #   --no-paginate --output text)

            export OldWorkflowID=$(<.circleci/ansible/workflowID)
            echo OldWorkflowIDFROMFILE : "$OldWorkflowID" 
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            echo currentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
            echo STACKS: "$STACKS"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            export s3AllBucket=$(aws s3api list-buckets --query "Buckets[].Name")
                 if [[ "${STACKS[@]}" == "s3://udapeople-${OldWorkflowID}" ]]
                 then
                   aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  fi
              echo backstack: "udapeople-backend-${OldWorkflowID}"
              echo frontStack:  "udapeople-frontend-${OldWorkflowID}"  
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migrations
         

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]  
